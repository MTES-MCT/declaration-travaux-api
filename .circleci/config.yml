version: 2.1
executors:
  jdk:
    docker:
      - image: circleci/openjdk:11.0.4-jdk-stretch
    working_directory: '~/rieau-api'
  jdkintegration:
    docker:
      - image: circleci/openjdk:11.0.4-jdk-stretch
      - image: circleci/postgres:10-alpine-ram
        environment:
          POSTGRES_PASS: postgres
          POSTGRES_DB: postgres
      - image: jboss/keycloak:7.0.0
        environment:
          DB_VENDOR: H2
          KEYCLOAK_USER: admin
          KEYCLOAK_PASSWORD: admin
      - image: minio/minio:RELEASE.2019-09-18T21-55-05Z
        environment:
          MINIO_ACCESS_KEY: minio
          MINIO_SECRET_KEY: minio123
    working_directory: '~/rieau-api'

jobs:
  install-dependencies:
    executor: jdk
    steps:
      - checkout
      - run: cp src/main/resources/application.properties.sample src/main/resources/application.properties
      - run: cp src/main/resources/application-dev.properties.sample src/main/resources/application-dev.properties
      - restore_cache:
          key: rieau-api-{{ checksum "pom.xml" }}
      - run: mvn dependency:go-offline
      - save_cache:
          paths:
            - '~/.m2'
          key: rieau-api-{{ checksum "pom.xml" }}
      - persist_to_workspace:
          root: '~'
          paths: 
            - '.m2'
            - 'rieau-api'
  check-dependencies:
    executor: jdk
    steps:
      - attach_workspace:
          at: '~/'
      - run: mvn verify -Pdev -DskipTests
      - store_test_results:
          path: target
  unit-tests:
    executor: jdk
    steps:
      - attach_workspace:
          at: '~/'
      - run: mvn test -Pdev
      - store_test_results:
          path: target/surefire-reports
  integration-tests:
    executor: jdkintegration
    steps:
      - attach_workspace:
          at: '~/'
      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgres && exit 1
      - run:
          name: Install PgSQL CLI; Init database
          environment:
            POSTGRES_USER: postgres
            POSTGRES_DB: postgres
          command: |
            sudo apt-get update
            sudo apt-get install -y postgresql-client
            psql -h localhost -p 5432 --username $POSTGRES_USER --dbname $POSTGRES_DB -c "CREATE USER rieau;"
            psql -h localhost -p 5432 --username $POSTGRES_USER --dbname $POSTGRES_DB -c "CREATE DATABASE rieau;"
            psql -h localhost -p 5432 --username $POSTGRES_USER --dbname $POSTGRES_DB -c "GRANT ALL PRIVILEGES ON DATABASE rieau TO rieau;"
      - run:
          command: |
            mvn integration-test
      - store_test_results:
          path: target/failsafe-reports
      
  build:
    executor: jdk
    steps:
      - attach_workspace:
          at: '~/'
      - run:
          command: |
            mvn package -DskipTests 
            mkdir -p target/dependency && (cd target/dependency; jar -xf ../*.jar)
      - store_artifacts:
          path: target/dependency
      - persist_to_workspace:
          root: '~'
          paths:
            - 'rieau-api'

  build-docker:
    executor: jdk    
    steps:
      - attach_workspace:
          at: '~/'
      - setup_remote_docker
      - run: |
          if [[ -z "$DOCKERHUB_USER" || -z "$DOCKERHUB_PASSWORD" ]]; then
            echo "Missing DOCKERHUB_USER or DOCKERHUB_PASSWORD environment variables!"
            exit 1
          fi
          docker build -t tristanrobert/rieau-api:$CIRCLE_SHA1 -f src/main/docker/Dockerfile .
          echo "$DOCKERHUB_PASSWORD" | docker login -u $DOCKERHUB_USER --password-stdin
          docker push tristanrobert/rieau-api:$CIRCLE_SHA1
          if [[ "$CIRCLE_BRANCH" = "master" ]]; then
            docker tag tristanrobert/rieau-api:$CIRCLE_SHA1 tristanrobert/rieau-api:latest
            docker push tristanrobert/rieau-api:latest
          fi
  
  check-docker:
    docker:
      - image: knqyf263/trivy
    steps:
      - run:
          name: Scan the image vulnerabilities
          command: trivy --exit-code 0 --quiet --auto-refresh --clear-cache tristanrobert/rieau-api:latest

workflows:
  version: 2
  build-deploy:
    jobs:
      - install-dependencies:
          requires: []

      - check-dependencies:
          requires:
            - install-dependencies
      - unit-tests:
          requires:
            - install-dependencies
      - integration-tests:
          requires:
            - install-dependencies

      - build:
          requires:
            - unit-tests
            - integration-tests

      - build-docker:
          requires:
            - build

      - check-docker:
          requires:
            - build-docker

  weekly-dependency-check:
    triggers:
      - schedule:
          cron: "0 0 * * 0" # every sunday midnight
          filters:
            branches:
              only:
                - master
    jobs:
      - install-dependencies:
          requires: []
      - check-dependencies:
          requires:
            - install-dependencies
      - check-docker:
          requires: []
